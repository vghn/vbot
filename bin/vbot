#!/usr/bin/env bash

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# DEBUG
[ -z "${DEBUG:-}" ] || set -x

# VARs
APPDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)/.."
GIT_BRANCH="${TRAVIS_BRANCH:-$(git symbolic-ref --short HEAD)}"

# Usage
usage(){
  echo '---------------------------------------------'
  echo "USAGE: ${BASH_SOURCE[0]} [COMMAND] [SUBCOMMAND] [OPTIONS]"
  echo '---------------------------------------------'
  echo 'Commands:'
  echo ''
  echo '  - deploy [FUNCTION NAME]'
  echo ''
  echo '  - help'
  echo ''
  echo '----------------------------------------------'
  echo 'For more information please consult the README'
  echo '----------------------------------------------'
  exit 1
}

# Load private environment
load_env(){
  if [[ -s "${APPDIR}/.env" ]]; then
    # shellcheck disable=1090
    . "${APPDIR}/.env" 2>/dev/null || true
  elif [[ -s "${APPDIR}/.env.gpg" ]]; then
    gpg --version
    gpg2 --version
    # shellcheck disable=1090
    . <( ( echo "$ENCRYPT_KEY" | base64 --decode ) |  gpg --batch --yes --decrypt --passphrase-fd 0 "${APPDIR}/.env.gpg" ) 2>/dev/null || true
  fi
}

# Detect stage
detect_stage(){
  if [[ "${TRAVIS_PULL_REQUEST:-false}" == 'false' ]]; then
    if [[ "$GIT_BRANCH" == 'master' ]]; then
      export SLS_STAGE='prod'
    elif [[ "$GIT_BRANCH" == 'dev' ]]; then
      export SLS_STAGE='dev'
    fi
  fi
}

# Configure AWS
aws_credentials(){
  echo 'Get temporary credentials for AWS'

  # Clear out existing AWS session environment, or the awscli call will fail
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_PROFILE

  # Read temporary credentials
  read -r -a AWS_STS <<< "$( \
    AWS_ACCESS_KEY_ID="${AWS_VBOT_ACCESS_KEY_ID:-}" \
    AWS_SECRET_ACCESS_KEY="${AWS_VBOT_SECRET_ACCESS_KEY:-}" \
    aws sts assume-role --output text \
    --role-arn "${AWS_VBOT_ROLE_ARN:-}" \
    --role-session-name "$(hostname)_$(date +%Y%m%d)" \
    --duration-seconds 900 \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    )"

  # Export temporary credentials
  export AWS_ACCESS_KEY_ID="${AWS_STS[0]}"
  export AWS_SECRET_ACCESS_KEY="${AWS_STS[1]}"
  export AWS_SESSION_TOKEN="${AWS_STS[2]}"
}

# Deploy
deploy_vbot(){
  local func="${1:-}"
  if [[ -z ${SLS_STAGE+x} ]]; then
    echo "Not deploying changes from ${GIT_BRANCH} (only master/dev)"
  else
    echo "Deploying stage from branch '${GIT_BRANCH}' to '${SLS_STAGE}'"
    npm install
    aws_credentials
    if [[ -n "$func" ]]; then
      serverless deploy function --stage "$SLS_STAGE" --function "$func" --verbose
    else
      serverless deploy --stage "$SLS_STAGE" --verbose
    fi
  fi
}

# Logs
vbot_logs(){
  local func="${1:-}"
  serverless logs --stage "$SLS_STAGE" --function "$func" --tail
}

# Process VBot CLI
vbot_process_cli(){
  export cmd="${1:-}"; shift || true
  export scmd="${1:-}"; shift || true

  load_env
  detect_stage

  case "$cmd" in
    deploy)
      deploy_vbot "$scmd"
      ;;
    logs)
      vbot_logs "$scmd"
      ;;
    help)
      usage
      ;;
    *)
      usage
      ;;
  esac
}

vbot_process_cli "${@:-}"
