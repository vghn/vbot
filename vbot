#!/usr/bin/env bash
# VBot CLI

# Usage
usage(){
  echo '---------------------------------------------'
  echo "USAGE: ${BASH_SOURCE[0]} [COMMAND] [SUBCOMMAND] [OPTIONS]"
  echo '---------------------------------------------'
  echo 'Commands:'
  echo ''
  echo '  - deploy [FUNCTION NAME]'
  echo ''
  echo '  - help'
  echo ''
  echo '----------------------------------------------'
  echo 'For more information please consult the README'
  echo '----------------------------------------------'
  exit 1
}

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# Debug
[ -z "${DEBUG:-}" ] || set -x

# System VARs
NOW="$(date +"%Y%m%d_%H%M%S")"
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
APPDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
VERSION=$(git --git-dir="${APPDIR}/.git" --work-tree="${APPDIR}" describe --always --tags)
export NOW TMPDIR APPDIR VERSION

# Output
e_ok()    { printf "  ✔  %s\\n" "$@" ;}
e_info()  { printf "  ➜  %s\\n" "$@" ;}
e_error() { printf "  ✖  %s\\n" "$@" ;}
e_warn()  { printf "    %s\\n" "$@" ;}
e_abort() { e_error "$1"; return "${2:-1}" ;}

# Clean-up
clean_up() {
  if [[ "${CI:-false}" == 'true' ]]; then
    for file in .env .aws; do
      if [[ -s "${APPDIR}/${file}" ]]; then
        e_info "Removing ${APPDIR}/${file}"
        shred -fu "${APPDIR:?}/${file}"
      fi
    done
  fi
}

# Detect stage
sls_detect_stage(){
  GIT_BRANCH="${GIT_BRANCH:-$(git symbolic-ref --short HEAD 2>/dev/null || echo '')}"

  if [[ "${TRAVIS_PULL_REQUEST:-false}" == 'false' ]]; then
    if [[ "$GIT_BRANCH" == 'master' ]]; then
      export SLS_STAGE='prod'
    elif [[ "$GIT_BRANCH" == 'dev' ]]; then
      export SLS_STAGE='dev'
    fi
  fi
}

# Deploy
sls_deploy(){
  local func="${1:-}"
  sls_detect_stage

  export AWS_SHARED_CREDENTIALS_FILE="${APPDIR}/.aws"

  if [[ -z ${SLS_STAGE+x} ]]; then
    echo "Not deploying changes from ${GIT_BRANCH} (only master/dev)"
  else
    echo "Deploying stage from branch '${GIT_BRANCH}' to '${SLS_STAGE}'"

    npm install

    if [[ -n "$func" ]]; then
      serverless deploy function --stage "$SLS_STAGE" --function "$func" --verbose
    else
      serverless deploy --stage "$SLS_STAGE" --verbose
    fi
  fi
}

# Logs
sls_logs(){
  local func="${1:-}"
  sls_detect_stage

  serverless logs --stage "$SLS_STAGE" --function "$func" --tail
}

# Process CLI
process_cli(){
  trap 'clean_up' EXIT HUP INT QUIT TERM
  if [[ -z $1 ]]; then usage; fi

  local cmd scmd
  cmd="${1:-}"; shift || true
  scmd="${1:-}"; shift || true

  case "$cmd" in
    deploy)
      sls_deploy "$scmd"
      ;;
    logs)
      sls_logs "$scmd"
      ;;
    help)
      usage
      ;;
    *)
      usage
      ;;
  esac
}

process_cli "${@:-}"
