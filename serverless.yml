service: vbot

custom:
  # Stage
  stage: ${opt:stage, env:SLS_STAGE, 'dev'}
  # Secrets Bucket Name
  secrets_bucket: ${self:service}-${self:custom.stage}-secrets
  # Domain Name
  domain_name: ghn.me
  # serverless-python-requirements plugin (package dependencies)
  pythonRequirements:
    dockerizePip: true
    zip: true
  # serverless-prune-plugin (prune old deployments)
  prune:
    automatic: true
    number: 3

package:
  individually: false
  exclude:
    - '**/*'
  include:
    - handler.py

provider:
  name: aws
  runtime: python3.6
  memorySize: 128
  stackTags:
    PROJECT: VBot
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.secrets_bucket}/*
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: arn:aws:ssm:*:*:parameter/${self:service}/*
  environment:
    SERVICE_NAME: ${self:service}
    SECRETS_BUCKET: ${self:custom.secrets_bucket}

functions:
  slack:
    handler: handler.slack
    events:
      - schedule: rate(1 minute)
      - http:
          path: slack
          method: post
  travis:
    handler: handler.travis
    events:
      - schedule: rate(1 minute)
      - http:
          path: travis
          method: post
  api:
    handler: handler.api
    events:
      - schedule: rate(1 minute)
      - http:
          path: api
          method: get
  cron:
    handler: handler.run
    events:
      - schedule: rate(1 day)

resources:
  Resources:
    Secrets:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.secrets_bucket}
        AccessControl: Private
    Certificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:service}.${self:custom.domain_name}
        DomainValidationOptions:
          - DomainName: ${self:service}.${self:custom.domain_name}
            ValidationDomain: ${self:custom.domain_name}
        Tags:
          - Key: Name
            Value: ${self:service}
    DomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn:
          Ref: Certificate
        DomainName: ${self:service}.${self:custom.domain_name}
    BasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName:
          Ref: DomainName
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:custom.stage}

plugins:
  - serverless-python-requirements
